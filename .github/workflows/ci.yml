name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          # prefer binary wheels to avoid build-time C extensions where possible
          pip install --prefer-binary -r requirements-dev.txt
      - name: Lint (ruff)
        run: ruff check .
      - name: Type check (mypy)
        run: mypy src
      - name: Run tests with coverage and enforce threshold
        run: |
          # run pytest under coverage and produce junit xml for artifacts
          pip install coverage
          coverage run -m pytest -q --junitxml=pytest-report.xml
          coverage report -m
          python - <<'PY'
import sys, re, subprocess
out = subprocess.check_output(['coverage','report']).decode()
print(out)
m = re.search(r'^\s*TOTAL\s+\d+\s+\d+\s+([\d\.]+)%', out, flags=re.M)
if not m:
    print('Could not parse coverage output')
    sys.exit(1)
pct = float(m.group(1))
print(f'Coverage TOTAL: {pct}%')
if pct < 85.0:
    print('Coverage threshold not met (>=85%)')
    sys.exit(2)
print('Coverage threshold satisfied')
PY
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml
      - name: Pip audit (blocking)
        run: pip-audit --strict
